schema {
    query: Query
    mutation: Mutation
}

type DateTime {
    string: String
    year: Int
    month: Int
    day: Int
    hour: Int
    minute: Int
    second: Int
    nano: Int
    timezone: String
}

type Tag {
    id: ID
    name: String
    description: String
}

type Equation {
    id: ID
    latex: String
    tags: [Tag]

    mathml: String

    memolinks: [String]

    favorite: Boolean
    issearch: Boolean
}

type EquationSimilarity {
    equation: Equation
    similarity: Float
    distance: Float
}

type SearchResult {
    success: Boolean
    msg: String
    numberofresults: Int
    equations: [EquationSimilarity]
}

type MathPastPaper {
    id: Int
    name: String
    subject: String
    paper: Int
    year: Int
    grade: Int
    month: String
    curriculum: String
    country: String
    language: String
    downloadlink: String
}

type MathCalculationData {
    calculationid: Int
    calculationname: String
    inputfields: [String]
}

type Comment {
    problemid: ID
    datetime: DateTime
    useremail: String
    comment: String
}

type User {
    useremail: String
    username: String
    apikey: String
    isadmin: Boolean
    darktheme: Boolean
}

type CommentSuccess {
    success: Boolean
    msg: String
    comment: Comment
}

type AuthenticateUser {
    success: Boolean
    msg: String
    user: User
}

type EquationSuccess {
    success: Boolean
    msg: String
    equation: Equation
}

type EquationResult {
    success: Boolean
    msg: String
    equations: [Equation]
}

type CommentResult {
    success: Boolean
    msg: String
    comments: [Comment]
}

type TagResult {
    success: Boolean
    msg: String
    tags: [Tag]
}

type MathCalculationDataResult{
    success: Boolean
    msg: String
    mathcalcdata: [MathCalculationData]
}

type MathPastPaperResult{
    success: Boolean
    msg: String
    mathpastpapers: [MathPastPaper]
}

type Success {
    success: Boolean
    msg: String
    data: String
}

type ServerSettings{
    success: Boolean
    msg: String
    autocaching: Boolean
}

type Query {
    SimilaritySearch(useremail: String = "default", apikey: String, input: String, tags: [Int] = [], musthavememo: Boolean = False, allowusersearch: Boolean = True): SearchResult

    # Search(input: String, isloggedin: Boolean, useremail: String = "default", apikey: String): SearchResult

    GetAllEquations(useremail: String = "default", apikey: String): EquationResult #done - no auth #todofix
    
    APIStatus: Success #todofix

    GetUserHistory(useremail: String = "default", apikey: String): EquationResult #done - no auth #todofix

    GetAllComments(useremail: String = "default", apikey: String): CommentResult #todo - mock #todofix
    GetComments(useremail: String = "default", apikey: String, problemid: ID): CommentResult #done - no auth
    GetFavoriteProblems(useremail: String, apikey: String): EquationResult #todo - mock #todofix

    AuthenticateLogin(apikey: String, useremail: String, password: String): AuthenticateUser #todo - mock

    GetServerSettings(useremail: String = "default", apikey: String): ServerSettings #todo - mock

    GetAllTags(useremail: String = "default", apikey: String): TagResult #done - no auth

    # Math Calculations API
    # Basic Data
    GetMathCalculationsData(useremail: String = "default", apikey: String): MathCalculationDataResult #done - no auth
    GetMathPastPaperData(useremail: String = "default", apikey: String): MathPastPaperResult #done - no auth

    # Testing functions
    # TestSession: String
    # SetTestGlob(index: String, data: String): String
    # GetTestGlob(index: String): String
    # GetTestGlobFull: String
    # FilterTest(tags: [Int], useremail: String = "default", hasmemoonly: Boolean = false, nousersearches: Boolean = false): EquationResult

    #new
    GetProblem(useremail: String = "default", apikey: String, problemid: ID): EquationSuccess #todo - none
    GetPermanentAPIKey(useremail: String, apikey: String): Success #todo - none
}

type Mutation {
    CreateComment(problemid: Int, useremail: String, apikey: String, comment: String): CommentSuccess #done - no auth

    AddFavorite(problemid: Int, useremail: String, apikey: String): Success #todo - mock
    RemoveFavorite(problemid: Int, useremail: String, apikey: String): Success #todo - mock

    AddUserSearchClick(problemid: Int, useremail: String, apikey: String): Success #todo - mock

    UserSignUp(apikey: String, useremail: String, password: String): AuthenticateUser #done - no auth

    AddEquation(useremail: String, apikey: String, equation: String): EquationSuccess #todo - mock

    SetServerSettings(useremail: String, apikey: String, password: String, autocaching: Boolean): Success #todo - mock
    SetTheme(useremail: String, apikey: String, darktheme: Boolean): Success #todo - mock
}